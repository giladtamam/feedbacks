{"ast":null,"code":"import axios from 'axios';\nimport DeviceDetector from \"device-detector-js\";\nconst deviceDetector = new DeviceDetector();\nconst URL = 'https://cache.usabilla.com/example/apidemo.json';\nexport async function fetchFeedbackApi() {\n  try {\n    const {\n      data\n    } = await axios.get(URL);\n    const items = data.items.map(item => {\n      var _deviceData$device, _deviceData$os, _deviceData$os2, _deviceData$client, _deviceData$client2;\n\n      const deviceData = deviceDetector.parse(item.browser.userAgent);\n      return {\n        id: item.id,\n        rating: `${item.rating}`,\n        comment: item.comment,\n        device: (_deviceData$device = deviceData.device) === null || _deviceData$device === void 0 ? void 0 : _deviceData$device.type,\n        platform: `${(_deviceData$os = deviceData.os) === null || _deviceData$os === void 0 ? void 0 : _deviceData$os.name} ${(_deviceData$os2 = deviceData.os) === null || _deviceData$os2 === void 0 ? void 0 : _deviceData$os2.version}`,\n        browser: {\n          name: (_deviceData$client = deviceData.client) === null || _deviceData$client === void 0 ? void 0 : _deviceData$client.name,\n          version: (_deviceData$client2 = deviceData.client) === null || _deviceData$client2 === void 0 ? void 0 : _deviceData$client2.version\n        }\n      };\n    });\n    return {\n      items,\n      error: false\n    };\n  } catch (e) {\n    return {\n      items: [],\n      error: true\n    };\n  }\n}","map":{"version":3,"sources":["/Users/gilad.tamam/dev/Workspace/feedbacks/src/api/api.ts"],"names":["axios","DeviceDetector","deviceDetector","URL","fetchFeedbackApi","data","get","items","map","item","deviceData","parse","browser","userAgent","id","rating","comment","device","type","platform","os","name","version","client","error","e"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AAyBA,MAAMC,cAAc,GAAG,IAAID,cAAJ,EAAvB;AACA,MAAME,GAAG,GAAG,iDAAZ;AAEA,OAAO,eAAeC,gBAAf,GAAmF;AACxF,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAML,KAAK,CAACM,GAAN,CAAqBH,GAArB,CAAvB;AAEA,UAAMI,KAAkB,GAAGF,IAAI,CAACE,KAAL,CAAWC,GAAX,CAAgBC,IAAD,IAAgB;AAAA;;AACtD,YAAMC,UAAU,GAAGR,cAAc,CAACS,KAAf,CAAqBF,IAAI,CAACG,OAAL,CAAaC,SAAlC,CAAnB;AACA,aAAO;AACHC,QAAAA,EAAE,EAAEL,IAAI,CAACK,EADN;AAEHC,QAAAA,MAAM,EAAG,GAAEN,IAAI,CAACM,MAAO,EAFpB;AAGHC,QAAAA,OAAO,EAAEP,IAAI,CAACO,OAHX;AAIHC,QAAAA,MAAM,wBAAEP,UAAU,CAACO,MAAb,uDAAE,mBAAmBC,IAJxB;AAKHC,QAAAA,QAAQ,EAAG,GAAD,kBAAGT,UAAU,CAACU,EAAd,mDAAG,eAAeC,IAAK,IAAvB,mBAA0BX,UAAU,CAACU,EAArC,oDAA0B,gBAAeE,OAAQ,EALxD;AAMHV,QAAAA,OAAO,EAAE;AAAES,UAAAA,IAAI,wBAAEX,UAAU,CAACa,MAAb,uDAAE,mBAAmBF,IAA3B;AAAiCC,UAAAA,OAAO,yBAAEZ,UAAU,CAACa,MAAb,wDAAE,oBAAmBD;AAA7D;AANN,OAAP;AAQH,KAV0B,CAA3B;AAYA,WAAO;AAAEf,MAAAA,KAAF;AAASiB,MAAAA,KAAK,EAAE;AAAhB,KAAP;AACD,GAhBD,CAgBE,OAAMC,CAAN,EAAS;AACT,WAAO;AAAElB,MAAAA,KAAK,EAAE,EAAT;AAAaiB,MAAAA,KAAK,EAAE;AAApB,KAAP;AACD;AACF","sourcesContent":["import axios from 'axios';\nimport DeviceDetector from \"device-detector-js\";\n\ninterface Item {\n  id: string;\n  rating: string;\n  comment: string;\n  browser: { userAgent: string; };\n}\ninterface IResponse {\n    items: Item[],\n    count: number,\n    count_nolimit: number,\n    total: number\n}\n\nexport interface IFeedback {\n    id: string;\n    rating: string;\n    comment: string;\n    device: string | undefined;\n    platform: string | undefined;\n    browser: { name: string | undefined; version: string | undefined };\n}\n\n\nconst deviceDetector = new DeviceDetector();\nconst URL = 'https://cache.usabilla.com/example/apidemo.json';\n\nexport async function fetchFeedbackApi(): Promise<{ items: IFeedback[]; error: boolean }> {\n  try {\n    const { data } = await axios.get<IResponse>(URL);\n    \n    const items: IFeedback[] = data.items.map((item: Item) => {\n        const deviceData = deviceDetector.parse(item.browser.userAgent);\n        return {\n            id: item.id,\n            rating: `${item.rating}`,\n            comment: item.comment,\n            device: deviceData.device?.type,\n            platform: `${deviceData.os?.name} ${deviceData.os?.version}`,\n            browser: { name: deviceData.client?.name, version: deviceData.client?.version }\n        };\n    });\n\n    return { items, error: false }\n  } catch(e) {\n    return { items: [], error: true };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
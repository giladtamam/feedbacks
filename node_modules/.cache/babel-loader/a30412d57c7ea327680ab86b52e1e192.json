{"ast":null,"code":"var _jsxFileName = \"/Users/gilad.tamam/dev/Workspace/feedbacks/src/components/App.tsx\",\n    _s = $RefreshSig$();\n\nimport RatingButton from \"./RatingButton\";\nimport FeedbackTable from \"./FeedbackTable\";\nimport { Alert, Box, CircularProgress, TextField, styled } from \"@mui/material\";\nimport { useFetchFeedback } from \"../hooks/use-fetch\";\nimport { useFilterFeedbacks } from \"../hooks/use-filter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RatingButtonList = styled(Box)`\n    display: flex;\n`;\n_c = RatingButtonList;\nconst MainBox = styled(Box)`\n    display: flex;\n    padding: 10px;\n`;\n_c2 = MainBox;\nconst Spinner = styled(CircularProgress)`\n    display: flex;\n    margin-left: auto;\n    margin-right: auto;\n`;\n_c3 = Spinner;\n\nfunction App() {\n  _s();\n\n  const {\n    isLoading,\n    feedbacks,\n    isError\n  } = useFetchFeedback();\n  const {\n    filteredFeedbacks,\n    searchTerm,\n    ratingButtons,\n    onRatingChange,\n    onSearchChange\n  } = useFilterFeedbacks(feedbacks);\n  const isEmptyState = filteredFeedbacks.length === 0 && !isLoading && !isError;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MainBox, {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        inputProps: {\n          \"aria-label\": \"myAriaLabel\"\n        },\n        onChange: onSearchChange,\n        value: searchTerm,\n        label: \"Search here\",\n        variant: \"outlined\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(RatingButtonList, {\n        children: Object.entries(ratingButtons).map(rate => /*#__PURE__*/_jsxDEV(RatingButton, {\n          onButtonClick: onRatingChange,\n          rating: rate[0],\n          isSelected: rate[1]\n        }, rate[0], false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), isError && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      children: \"Something went worng, please try again later\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 26\n    }, this), isEmptyState && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"info\",\n      children: \"No feedback to show!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 31\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 27\n    }, this) : /*#__PURE__*/_jsxDEV(FeedbackTable, {\n      rows: filteredFeedbacks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 41\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"+Qx3ksWKapjFrOJkshBI7znsemA=\", false, function () {\n  return [useFetchFeedback, useFilterFeedbacks];\n});\n\n_c4 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"RatingButtonList\");\n$RefreshReg$(_c2, \"MainBox\");\n$RefreshReg$(_c3, \"Spinner\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["/Users/gilad.tamam/dev/Workspace/feedbacks/src/components/App.tsx"],"names":["RatingButton","FeedbackTable","Alert","Box","CircularProgress","TextField","styled","useFetchFeedback","useFilterFeedbacks","RatingButtonList","MainBox","Spinner","App","isLoading","feedbacks","isError","filteredFeedbacks","searchTerm","ratingButtons","onRatingChange","onSearchChange","isEmptyState","length","Object","entries","map","rate"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,gBAArB,EAAuCC,SAAvC,EAAkDC,MAAlD,QAAgE,eAAhE;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,kBAAT,QAAmC,qBAAnC;;AAEA,MAAMC,gBAAgB,GAAGH,MAAM,CAACH,GAAD,CAAM;AACrC;AACA,CAFA;KAAMM,gB;AAIN,MAAMC,OAAO,GAAGJ,MAAM,CAACH,GAAD,CAAM;AAC5B;AACA;AACA,CAHA;MAAMO,O;AAKN,MAAMC,OAAO,GAAGL,MAAM,CAACF,gBAAD,CAAmB;AACzC;AACA;AACA;AACA,CAJA;MAAMO,O;;AAMN,SAASC,GAAT,GAAe;AAAA;;AACX,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA;AAAxB,MAAoCR,gBAAgB,EAA1D;AACA,QAAM;AACFS,IAAAA,iBADE;AAEFC,IAAAA,UAFE;AAGFC,IAAAA,aAHE;AAIFC,IAAAA,cAJE;AAKFC,IAAAA;AALE,MAMFZ,kBAAkB,CAACM,SAAD,CANtB;AAOA,QAAMO,YAAY,GAAGL,iBAAiB,CAACM,MAAlB,KAA6B,CAA7B,IAAkC,CAACT,SAAnC,IAAgD,CAACE,OAAtE;AACA,sBACI;AAAA,4BACI,QAAC,OAAD;AAAA,8BACI,QAAC,SAAD;AACI,QAAA,UAAU,EAAE;AAAE,wBAAc;AAAhB,SADhB;AAEI,QAAA,QAAQ,EAAEK,cAFd;AAGI,QAAA,KAAK,EAAEH,UAHX;AAII,QAAA,KAAK,EAAC,aAJV;AAKI,QAAA,OAAO,EAAC;AALZ;AAAA;AAAA;AAAA;AAAA,cADJ,eAQI,QAAC,gBAAD;AAAA,kBACKM,MAAM,CAACC,OAAP,CAAeN,aAAf,EAA8BO,GAA9B,CAAmCC,IAAD,iBAC/B,QAAC,YAAD;AAEI,UAAA,aAAa,EAAEP,cAFnB;AAGI,UAAA,MAAM,EAAEO,IAAI,CAAC,CAAD,CAHhB;AAII,UAAA,UAAU,EAAEA,IAAI,CAAC,CAAD;AAJpB,WACSA,IAAI,CAAC,CAAD,CADb;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAoBMX,OAAO,iBAAI,QAAC,KAAD;AAAO,MAAA,QAAQ,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YApBjB,EAqBMM,YAAY,iBAAI,QAAC,KAAD;AAAO,MAAA,QAAQ,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YArBtB,EAsBMR,SAAS,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAiB,QAAC,aAAD;AAAe,MAAA,IAAI,EAAEG;AAArB;AAAA;AAAA;AAAA;AAAA,YAtBhC;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA0BH;;GApCQJ,G;UACqCL,gB,EAOtCC,kB;;;MARCI,G;AAsCT,eAAeA,GAAf","sourcesContent":["import RatingButton from \"./RatingButton\";\nimport FeedbackTable from \"./FeedbackTable\";\nimport { Alert, Box, CircularProgress, TextField, styled } from \"@mui/material\";\nimport { useFetchFeedback } from \"../hooks/use-fetch\";\nimport { useFilterFeedbacks } from \"../hooks/use-filter\";\n\nconst RatingButtonList = styled(Box)`\n    display: flex;\n`;\n\nconst MainBox = styled(Box)`\n    display: flex;\n    padding: 10px;\n`;\n\nconst Spinner = styled(CircularProgress)`\n    display: flex;\n    margin-left: auto;\n    margin-right: auto;\n`;\n\nfunction App() {\n    const { isLoading, feedbacks, isError } = useFetchFeedback();\n    const {\n        filteredFeedbacks,\n        searchTerm,\n        ratingButtons,\n        onRatingChange,\n        onSearchChange,\n    } = useFilterFeedbacks(feedbacks);\n    const isEmptyState = filteredFeedbacks.length === 0 && !isLoading && !isError;\n    return (\n        <div>\n            <MainBox>\n                <TextField\n                    inputProps={{ \"aria-label\": \"myAriaLabel\" }}\n                    onChange={onSearchChange}\n                    value={searchTerm}\n                    label=\"Search here\"\n                    variant=\"outlined\"\n                />\n                <RatingButtonList>\n                    {Object.entries(ratingButtons).map((rate) => (\n                        <RatingButton\n                            key={rate[0]}\n                            onButtonClick={onRatingChange}\n                            rating={rate[0]}\n                            isSelected={rate[1]}\n                        />\n                    ))}\n                </RatingButtonList>\n            </MainBox>\n            { isError && <Alert severity=\"error\">Something went worng, please try again later</Alert> }\n            { isEmptyState && <Alert severity=\"info\">No feedback to show!</Alert> }\n            { isLoading ? <Spinner /> : <FeedbackTable rows={filteredFeedbacks} /> }\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
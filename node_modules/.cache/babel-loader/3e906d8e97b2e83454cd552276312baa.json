{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst mobiles_json_1 = __importDefault(require(\"../../fixtures/regexes/device/mobiles.json\"));\n\nconst variable_replacement_1 = require(\"../../utils/variable-replacement\");\n\nconst user_agent_1 = require(\"../../utils/user-agent\");\n\nconst model_1 = require(\"../../utils/model\");\n\nclass MobileParser {\n  constructor() {\n    this.parse = userAgent => {\n      const result = {\n        type: \"\",\n        brand: \"\",\n        model: \"\"\n      };\n      let resultType = \"\";\n\n      for (const [brand, mobile] of Object.entries(mobiles_json_1.default)) {\n        const match = user_agent_1.userAgentParser(mobile.regex, userAgent);\n        if (!match) continue;\n        resultType = \"device\" in mobile && mobile.device || \"\";\n        result.brand = brand;\n\n        if (\"model\" in mobile && mobile.model) {\n          result.model = model_1.buildModel(variable_replacement_1.variableReplacement(mobile.model, match)).trim();\n        } else if (\"models\" in mobile && mobile.models) {\n          for (const model of mobile.models) {\n            const modelMatch = user_agent_1.userAgentParser(model.regex, userAgent);\n            if (!modelMatch) continue;\n            result.model = model_1.buildModel(variable_replacement_1.variableReplacement(model.model, modelMatch)).trim();\n\n            if (\"device\" in model && model.device) {\n              resultType = model.device;\n            }\n\n            if (\"brand\" in model) {\n              result.brand = model.brand || \"\";\n            }\n\n            break;\n          }\n        }\n\n        break;\n      } // Sanitize device type\n\n\n      if (resultType === \"tv\") {\n        result.type = \"television\";\n      } else if (resultType === \"car browser\") {\n        result.type = \"car\";\n      } else {\n        result.type = resultType;\n      } // Sanitize device brand\n\n\n      if (result.brand === \"Unknown\") {\n        result.brand = \"\";\n      }\n\n      return result;\n    };\n  }\n\n}\n\nexports.default = MobileParser;","map":{"version":3,"sources":["/Users/gilad.tamam/dev/Workspace/feedbacks/node_modules/device-detector-js/dist/parsers/device/mobiles.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","mobiles_json_1","require","variable_replacement_1","user_agent_1","model_1","MobileParser","constructor","parse","userAgent","result","type","brand","model","resultType","mobile","entries","default","match","userAgentParser","regex","device","buildModel","variableReplacement","trim","models","modelMatch"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mobiles_json_1 = __importDefault(require(\"../../fixtures/regexes/device/mobiles.json\"));\nconst variable_replacement_1 = require(\"../../utils/variable-replacement\");\nconst user_agent_1 = require(\"../../utils/user-agent\");\nconst model_1 = require(\"../../utils/model\");\nclass MobileParser {\n    constructor() {\n        this.parse = (userAgent) => {\n            const result = {\n                type: \"\",\n                brand: \"\",\n                model: \"\"\n            };\n            let resultType = \"\";\n            for (const [brand, mobile] of Object.entries(mobiles_json_1.default)) {\n                const match = user_agent_1.userAgentParser(mobile.regex, userAgent);\n                if (!match)\n                    continue;\n                resultType = \"device\" in mobile && mobile.device || \"\";\n                result.brand = brand;\n                if (\"model\" in mobile && mobile.model) {\n                    result.model = model_1.buildModel(variable_replacement_1.variableReplacement(mobile.model, match)).trim();\n                }\n                else if (\"models\" in mobile && mobile.models) {\n                    for (const model of mobile.models) {\n                        const modelMatch = user_agent_1.userAgentParser(model.regex, userAgent);\n                        if (!modelMatch)\n                            continue;\n                        result.model = model_1.buildModel(variable_replacement_1.variableReplacement(model.model, modelMatch)).trim();\n                        if (\"device\" in model && model.device) {\n                            resultType = model.device;\n                        }\n                        if (\"brand\" in model) {\n                            result.brand = model.brand || \"\";\n                        }\n                        break;\n                    }\n                }\n                break;\n            }\n            // Sanitize device type\n            if (resultType === \"tv\") {\n                result.type = \"television\";\n            }\n            else if (resultType === \"car browser\") {\n                result.type = \"car\";\n            }\n            else {\n                result.type = resultType;\n            }\n            // Sanitize device brand\n            if (result.brand === \"Unknown\") {\n                result.brand = \"\";\n            }\n            return result;\n        };\n    }\n}\nexports.default = MobileParser;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.versionCompare = (v1, v2, operator) => {\n  //      discuss at: http://locutus.io/php/version_compare/\n  //      original by: Philippe Jausions (http://pear.php.net/user/jausions)\n  //      original by: Aidan Lister (http://aidanlister.com/)\n  //      reimplemented by: Kankrelune (http://www.webfaktory.info/)\n  //      improved by: Brett Zamir (http://brett-zamir.me)\n  //      improved by: Scott Baker\n  //      improved by: Theriault (https://github.com/Theriault)\n  //      example 1: version_compare('8.2.5rc', '8.2.5a')\n  //      returns 1: 1\n  //      example 2: version_compare('8.2.50', '8.2.52', '<')\n  //      returns 2: true\n  //      example 3: version_compare('5.3.0-dev', '5.3.0')\n  //      returns 3: -1\n  //      example 4: version_compare('4.1.0.52','4.01.0.51')\n  //      returns 4: 1\n  // Important: compare must be initialized at 0.\n  let i;\n  let x;\n  let compare = 0; // vm maps textual PHP versions to negatives so they're less than 0.\n  // PHP currently defines these as CASE-SENSITIVE. It is important to\n  // leave these as negatives so that they can come before numerical versions\n  // and as if no letters were there to begin with.\n  // (1alpha is < 1 and < 1.1 but > 1dev1)\n  // If a non-numerical value can't be mapped to this table, it receives\n  // -7 as its value.\n\n  const vm = {\n    \"dev\": -6,\n    \"alpha\": -5,\n    \"a\": -5,\n    \"beta\": -4,\n    \"b\": -4,\n    \"RC\": -3,\n    \"rc\": -3,\n    \"#\": -2,\n    \"p\": 1,\n    \"pl\": 1\n  }; // This function will be called to prepare each version argument.\n  // It replaces every _, -, and + with a dot.\n  // It surrounds any nonsequence of numbers/dots with dots.\n  // It replaces sequences of dots with a single dot.\n  //    version_compare('4..0', '4.0') === 0\n  // Important: A string of 0 length needs to be converted into a value\n  // even less than an unexisting value in vm (-7), hence [-8].\n  // It's also important to not strip spaces because of this.\n  //   version_compare('', ' ') === 1\n\n  const prepVersion = v => {\n    v = (\"\" + v).replace(/[_\\-+]/g, \".\");\n    v = v.replace(/([^.\\d]+)/g, \".$1.\").replace(/\\.{2,}/g, \".\");\n    return !v.length ? [-8] : v.split(\".\");\n  }; // This converts a version component to a number.\n  // Empty component becomes 0.\n  // Non-numerical component becomes a negative number.\n  // Numerical component becomes itself as an integer.\n\n\n  const numVersion = v => {\n    return !v ? 0 : isNaN(v) ? vm[v] || -7 : parseInt(v, 10);\n  };\n\n  v1 = prepVersion(v1);\n  v2 = prepVersion(v2);\n  x = Math.max(v1.length, v2.length);\n\n  for (i = 0; i < x; i++) {\n    if (v1[i] === v2[i]) {\n      continue;\n    }\n\n    v1[i] = numVersion(v1[i]);\n    v2[i] = numVersion(v2[i]);\n\n    if (v1[i] < v2[i]) {\n      compare = -1;\n      break;\n    } else if (v1[i] > v2[i]) {\n      compare = 1;\n      break;\n    }\n  }\n\n  if (!operator) {\n    return compare;\n  } // Important: operator is CASE-SENSITIVE.\n  // \"No operator\" seems to be treated as \"<.\"\n  // Any other values seem to make the function return null.\n\n\n  switch (operator) {\n    case \">\":\n    case \"gt\":\n      return compare > 0;\n\n    case \">=\":\n    case \"ge\":\n      return compare >= 0;\n\n    case \"<=\":\n    case \"le\":\n      return compare <= 0;\n\n    case \"===\":\n    case \"=\":\n    case \"eq\":\n      return compare === 0;\n\n    case \"<>\":\n    case \"!==\":\n    case \"ne\":\n      return compare !== 0;\n\n    case \"\":\n    case \"<\":\n    case \"lt\":\n      return compare < 0;\n\n    default:\n      return null;\n  }\n};","map":{"version":3,"sources":["/Users/gilad.tamam/dev/Workspace/feedbacks/node_modules/device-detector-js/dist/utils/version-compare.js"],"names":["Object","defineProperty","exports","value","versionCompare","v1","v2","operator","i","x","compare","vm","prepVersion","v","replace","length","split","numVersion","isNaN","parseInt","Math","max"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.versionCompare = (v1, v2, operator) => {\n    //      discuss at: http://locutus.io/php/version_compare/\n    //      original by: Philippe Jausions (http://pear.php.net/user/jausions)\n    //      original by: Aidan Lister (http://aidanlister.com/)\n    //      reimplemented by: Kankrelune (http://www.webfaktory.info/)\n    //      improved by: Brett Zamir (http://brett-zamir.me)\n    //      improved by: Scott Baker\n    //      improved by: Theriault (https://github.com/Theriault)\n    //      example 1: version_compare('8.2.5rc', '8.2.5a')\n    //      returns 1: 1\n    //      example 2: version_compare('8.2.50', '8.2.52', '<')\n    //      returns 2: true\n    //      example 3: version_compare('5.3.0-dev', '5.3.0')\n    //      returns 3: -1\n    //      example 4: version_compare('4.1.0.52','4.01.0.51')\n    //      returns 4: 1\n    // Important: compare must be initialized at 0.\n    let i;\n    let x;\n    let compare = 0;\n    // vm maps textual PHP versions to negatives so they're less than 0.\n    // PHP currently defines these as CASE-SENSITIVE. It is important to\n    // leave these as negatives so that they can come before numerical versions\n    // and as if no letters were there to begin with.\n    // (1alpha is < 1 and < 1.1 but > 1dev1)\n    // If a non-numerical value can't be mapped to this table, it receives\n    // -7 as its value.\n    const vm = {\n        \"dev\": -6,\n        \"alpha\": -5,\n        \"a\": -5,\n        \"beta\": -4,\n        \"b\": -4,\n        \"RC\": -3,\n        \"rc\": -3,\n        \"#\": -2,\n        \"p\": 1,\n        \"pl\": 1\n    };\n    // This function will be called to prepare each version argument.\n    // It replaces every _, -, and + with a dot.\n    // It surrounds any nonsequence of numbers/dots with dots.\n    // It replaces sequences of dots with a single dot.\n    //    version_compare('4..0', '4.0') === 0\n    // Important: A string of 0 length needs to be converted into a value\n    // even less than an unexisting value in vm (-7), hence [-8].\n    // It's also important to not strip spaces because of this.\n    //   version_compare('', ' ') === 1\n    const prepVersion = (v) => {\n        v = (\"\" + v).replace(/[_\\-+]/g, \".\");\n        v = v.replace(/([^.\\d]+)/g, \".$1.\").replace(/\\.{2,}/g, \".\");\n        return (!v.length ? [-8] : v.split(\".\"));\n    };\n    // This converts a version component to a number.\n    // Empty component becomes 0.\n    // Non-numerical component becomes a negative number.\n    // Numerical component becomes itself as an integer.\n    const numVersion = (v) => {\n        return !v ? 0 : (isNaN(v) ? vm[v] || -7 : parseInt(v, 10));\n    };\n    v1 = prepVersion(v1);\n    v2 = prepVersion(v2);\n    x = Math.max(v1.length, v2.length);\n    for (i = 0; i < x; i++) {\n        if (v1[i] === v2[i]) {\n            continue;\n        }\n        v1[i] = numVersion(v1[i]);\n        v2[i] = numVersion(v2[i]);\n        if (v1[i] < v2[i]) {\n            compare = -1;\n            break;\n        }\n        else if (v1[i] > v2[i]) {\n            compare = 1;\n            break;\n        }\n    }\n    if (!operator) {\n        return compare;\n    }\n    // Important: operator is CASE-SENSITIVE.\n    // \"No operator\" seems to be treated as \"<.\"\n    // Any other values seem to make the function return null.\n    switch (operator) {\n        case \">\":\n        case \"gt\":\n            return (compare > 0);\n        case \">=\":\n        case \"ge\":\n            return (compare >= 0);\n        case \"<=\":\n        case \"le\":\n            return (compare <= 0);\n        case \"===\":\n        case \"=\":\n        case \"eq\":\n            return (compare === 0);\n        case \"<>\":\n        case \"!==\":\n        case \"ne\":\n            return (compare !== 0);\n        case \"\":\n        case \"<\":\n        case \"lt\":\n            return (compare < 0);\n        default:\n            return null;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst version_1 = require(\"../../utils/version\");\n\nconst variable_replacement_1 = require(\"../../utils/variable-replacement\");\n\nconst user_agent_1 = require(\"../../utils/user-agent\");\n\nconst browsers_json_1 = __importDefault(require(\"../../fixtures/regexes/client/browsers.json\"));\n\nconst browser_engine_json_1 = __importDefault(require(\"../../fixtures/regexes/client/browser_engine.json\"));\n\nconst available_browsers_json_1 = __importDefault(require(\"./fixtures/available-browsers.json\"));\n\nconst mobile_only_browsers_json_1 = __importDefault(require(\"./fixtures/mobile-only-browsers.json\"));\n\nclass BrowserParser {\n  constructor(options) {\n    this.options = {\n      versionTruncation: 1\n    };\n\n    this.parse = userAgent => {\n      const result = {\n        type: \"\",\n        name: \"\",\n        version: \"\",\n        engine: \"\",\n        engineVersion: \"\"\n      };\n\n      for (const browser of browsers_json_1.default) {\n        const match = user_agent_1.userAgentParser(browser.regex, userAgent);\n        if (!match) continue;\n        const vrpVersion = variable_replacement_1.variableReplacement(browser.version, match);\n        const version = version_1.formatVersion(vrpVersion, this.options.versionTruncation);\n        const shortVersion = version && parseFloat(version_1.formatVersion(vrpVersion, 1)) || \"\";\n\n        if (browser.engine) {\n          result.engine = browser.engine.default;\n\n          if (browser.engine && browser.engine.versions && shortVersion) {\n            const sortedEngineVersions = Object.entries(browser.engine.versions).sort((a, b) => {\n              return parseFloat(a[0]) > parseFloat(b[0]) ? 1 : -1;\n            });\n\n            for (const [versionThreshold, engineByVersion] of sortedEngineVersions) {\n              if (parseFloat(versionThreshold) <= shortVersion) {\n                result.engine = engineByVersion || \"\";\n              }\n            }\n          }\n        }\n\n        result.type = \"browser\";\n        result.name = variable_replacement_1.variableReplacement(browser.name, match);\n        result.version = version;\n        break;\n      }\n\n      if (!result.engine) {\n        for (const browserEngine of browser_engine_json_1.default) {\n          let match = null;\n\n          try {\n            match = RegExp(browserEngine.regex, \"i\").exec(userAgent);\n          } catch (_a) {// TODO: find out why it fails in some browsers\n          }\n\n          if (!match) continue;\n          result.engine = browserEngine.name;\n          break;\n        }\n      }\n\n      result.engineVersion = version_1.formatVersion(version_1.parseBrowserEngineVersion(userAgent, result.engine), this.options.versionTruncation);\n      return result;\n    };\n\n    this.options = Object.assign(Object.assign({}, this.options), options);\n  }\n\n}\n\nexports.default = BrowserParser;\n\nBrowserParser.getBrowserShortName = browserName => {\n  for (const [shortName, name] of Object.entries(available_browsers_json_1.default)) {\n    if (name === browserName) {\n      return shortName;\n    }\n  }\n\n  return \"\";\n};\n\nBrowserParser.isMobileOnlyBrowser = browserName => {\n  return mobile_only_browsers_json_1.default.includes(BrowserParser.getBrowserShortName(browserName));\n};","map":{"version":3,"sources":["/Users/gilad.tamam/dev/Workspace/feedbacks/node_modules/device-detector-js/dist/parsers/client/browser.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","version_1","require","variable_replacement_1","user_agent_1","browsers_json_1","browser_engine_json_1","available_browsers_json_1","mobile_only_browsers_json_1","BrowserParser","constructor","options","versionTruncation","parse","userAgent","result","type","name","version","engine","engineVersion","browser","default","match","userAgentParser","regex","vrpVersion","variableReplacement","formatVersion","shortVersion","parseFloat","versions","sortedEngineVersions","entries","sort","a","b","versionThreshold","engineByVersion","browserEngine","RegExp","exec","_a","parseBrowserEngineVersion","assign","getBrowserShortName","browserName","shortName","isMobileOnlyBrowser","includes"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst version_1 = require(\"../../utils/version\");\nconst variable_replacement_1 = require(\"../../utils/variable-replacement\");\nconst user_agent_1 = require(\"../../utils/user-agent\");\nconst browsers_json_1 = __importDefault(require(\"../../fixtures/regexes/client/browsers.json\"));\nconst browser_engine_json_1 = __importDefault(require(\"../../fixtures/regexes/client/browser_engine.json\"));\nconst available_browsers_json_1 = __importDefault(require(\"./fixtures/available-browsers.json\"));\nconst mobile_only_browsers_json_1 = __importDefault(require(\"./fixtures/mobile-only-browsers.json\"));\nclass BrowserParser {\n    constructor(options) {\n        this.options = {\n            versionTruncation: 1\n        };\n        this.parse = (userAgent) => {\n            const result = {\n                type: \"\",\n                name: \"\",\n                version: \"\",\n                engine: \"\",\n                engineVersion: \"\"\n            };\n            for (const browser of browsers_json_1.default) {\n                const match = user_agent_1.userAgentParser(browser.regex, userAgent);\n                if (!match)\n                    continue;\n                const vrpVersion = variable_replacement_1.variableReplacement(browser.version, match);\n                const version = version_1.formatVersion(vrpVersion, this.options.versionTruncation);\n                const shortVersion = version && parseFloat(version_1.formatVersion(vrpVersion, 1)) || \"\";\n                if (browser.engine) {\n                    result.engine = browser.engine.default;\n                    if (browser.engine && browser.engine.versions && shortVersion) {\n                        const sortedEngineVersions = Object.entries(browser.engine.versions).sort((a, b) => {\n                            return parseFloat(a[0]) > parseFloat(b[0]) ? 1 : -1;\n                        });\n                        for (const [versionThreshold, engineByVersion] of sortedEngineVersions) {\n                            if (parseFloat(versionThreshold) <= shortVersion) {\n                                result.engine = engineByVersion || \"\";\n                            }\n                        }\n                    }\n                }\n                result.type = \"browser\";\n                result.name = variable_replacement_1.variableReplacement(browser.name, match);\n                result.version = version;\n                break;\n            }\n            if (!result.engine) {\n                for (const browserEngine of browser_engine_json_1.default) {\n                    let match = null;\n                    try {\n                        match = RegExp(browserEngine.regex, \"i\").exec(userAgent);\n                    }\n                    catch (_a) {\n                        // TODO: find out why it fails in some browsers\n                    }\n                    if (!match)\n                        continue;\n                    result.engine = browserEngine.name;\n                    break;\n                }\n            }\n            result.engineVersion = version_1.formatVersion(version_1.parseBrowserEngineVersion(userAgent, result.engine), this.options.versionTruncation);\n            return result;\n        };\n        this.options = Object.assign(Object.assign({}, this.options), options);\n    }\n}\nexports.default = BrowserParser;\nBrowserParser.getBrowserShortName = (browserName) => {\n    for (const [shortName, name] of Object.entries(available_browsers_json_1.default)) {\n        if (name === browserName) {\n            return shortName;\n        }\n    }\n    return \"\";\n};\nBrowserParser.isMobileOnlyBrowser = (browserName) => {\n    return mobile_only_browsers_json_1.default.includes(BrowserParser.getBrowserShortName(browserName));\n};\n"]},"metadata":{},"sourceType":"script"}
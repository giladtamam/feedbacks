{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst oss_json_1 = __importDefault(require(\"../../fixtures/regexes/oss.json\"));\n\nconst version_1 = require(\"../../utils/version\");\n\nconst variable_replacement_1 = require(\"../../utils/variable-replacement\");\n\nconst user_agent_1 = require(\"../../utils/user-agent\");\n\nconst operating_system_json_1 = __importDefault(require(\"./fixtures/operating-system.json\"));\n\nconst desktopOsArray = [\"AmigaOS\", \"IBM\", \"GNU/Linux\", \"Mac\", \"Unix\", \"Windows\", \"BeOS\", \"Chrome OS\"];\nconst shortOsNames = operating_system_json_1.default.operatingSystem;\nconst osFamilies = operating_system_json_1.default.osFamilies;\n\nclass OperatingSystemParser {\n  constructor(options) {\n    this.options = {\n      versionTruncation: 1\n    };\n\n    this.parse = userAgent => {\n      const result = {\n        name: \"\",\n        version: \"\",\n        platform: this.parsePlatform(userAgent)\n      };\n\n      for (const operatingSystem of oss_json_1.default) {\n        const match = user_agent_1.userAgentParser(operatingSystem.regex, userAgent);\n        if (!match) continue;\n        result.name = variable_replacement_1.variableReplacement(operatingSystem.name, match);\n        result.version = version_1.formatVersion(variable_replacement_1.variableReplacement(operatingSystem.version, match), this.options.versionTruncation);\n\n        if (result.name === \"lubuntu\") {\n          result.name = \"Lubuntu\";\n        }\n\n        if (result.name === \"debian\") {\n          result.name = \"Debian\";\n        }\n\n        if (result.name === \"YunOS\") {\n          result.name = \"YunOs\";\n        }\n\n        return result;\n      }\n\n      return null;\n    };\n\n    this.parsePlatform = userAgent => {\n      if (user_agent_1.userAgentParser(\"arm|aarch64|Watch ?OS|Watch1,[12]\", userAgent)) {\n        return \"ARM\";\n      }\n\n      if (user_agent_1.userAgentParser(\"WOW64|x64|win64|amd64|x86_64\", userAgent)) {\n        return \"x64\";\n      }\n\n      if (user_agent_1.userAgentParser(\"i[0-9]86|i86pc\", userAgent)) {\n        return \"x86\";\n      }\n\n      if (user_agent_1.userAgentParser(\"mips\", userAgent)) {\n        return \"MIPS\";\n      }\n\n      if (user_agent_1.userAgentParser(\"sh4\", userAgent)) {\n        return \"SuperH\";\n      }\n\n      return \"\";\n    };\n\n    this.options = Object.assign(Object.assign({}, this.options), options);\n  }\n\n}\n\nexports.default = OperatingSystemParser;\n\nOperatingSystemParser.getDesktopOsArray = () => desktopOsArray;\n\nOperatingSystemParser.getOsFamily = osName => {\n  const osShortName = OperatingSystemParser.getOsShortName(osName);\n\n  for (const [osFamily, shortNames] of Object.entries(osFamilies)) {\n    if (shortNames.includes(osShortName)) {\n      return osFamily;\n    }\n  }\n\n  return \"\";\n};\n\nOperatingSystemParser.getOsShortName = osName => {\n  for (const [shortName, name] of Object.entries(shortOsNames)) {\n    if (name === osName) return shortName;\n  }\n\n  return \"\";\n};","map":{"version":3,"sources":["/Users/gilad.tamam/dev/Workspace/feedbacks/node_modules/device-detector-js/dist/parsers/operating-system/index.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","oss_json_1","require","version_1","variable_replacement_1","user_agent_1","operating_system_json_1","desktopOsArray","shortOsNames","default","operatingSystem","osFamilies","OperatingSystemParser","constructor","options","versionTruncation","parse","userAgent","result","name","version","platform","parsePlatform","match","userAgentParser","regex","variableReplacement","formatVersion","assign","getDesktopOsArray","getOsFamily","osName","osShortName","getOsShortName","osFamily","shortNames","entries","includes","shortName"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst oss_json_1 = __importDefault(require(\"../../fixtures/regexes/oss.json\"));\nconst version_1 = require(\"../../utils/version\");\nconst variable_replacement_1 = require(\"../../utils/variable-replacement\");\nconst user_agent_1 = require(\"../../utils/user-agent\");\nconst operating_system_json_1 = __importDefault(require(\"./fixtures/operating-system.json\"));\nconst desktopOsArray = [\"AmigaOS\", \"IBM\", \"GNU/Linux\", \"Mac\", \"Unix\", \"Windows\", \"BeOS\", \"Chrome OS\"];\nconst shortOsNames = operating_system_json_1.default.operatingSystem;\nconst osFamilies = operating_system_json_1.default.osFamilies;\nclass OperatingSystemParser {\n    constructor(options) {\n        this.options = {\n            versionTruncation: 1\n        };\n        this.parse = (userAgent) => {\n            const result = {\n                name: \"\",\n                version: \"\",\n                platform: this.parsePlatform(userAgent)\n            };\n            for (const operatingSystem of oss_json_1.default) {\n                const match = user_agent_1.userAgentParser(operatingSystem.regex, userAgent);\n                if (!match)\n                    continue;\n                result.name = variable_replacement_1.variableReplacement(operatingSystem.name, match);\n                result.version = version_1.formatVersion(variable_replacement_1.variableReplacement(operatingSystem.version, match), this.options.versionTruncation);\n                if (result.name === \"lubuntu\") {\n                    result.name = \"Lubuntu\";\n                }\n                if (result.name === \"debian\") {\n                    result.name = \"Debian\";\n                }\n                if (result.name === \"YunOS\") {\n                    result.name = \"YunOs\";\n                }\n                return result;\n            }\n            return null;\n        };\n        this.parsePlatform = (userAgent) => {\n            if (user_agent_1.userAgentParser(\"arm|aarch64|Watch ?OS|Watch1,[12]\", userAgent)) {\n                return \"ARM\";\n            }\n            if (user_agent_1.userAgentParser(\"WOW64|x64|win64|amd64|x86_64\", userAgent)) {\n                return \"x64\";\n            }\n            if (user_agent_1.userAgentParser(\"i[0-9]86|i86pc\", userAgent)) {\n                return \"x86\";\n            }\n            if (user_agent_1.userAgentParser(\"mips\", userAgent)) {\n                return \"MIPS\";\n            }\n            if (user_agent_1.userAgentParser(\"sh4\", userAgent)) {\n                return \"SuperH\";\n            }\n            return \"\";\n        };\n        this.options = Object.assign(Object.assign({}, this.options), options);\n    }\n}\nexports.default = OperatingSystemParser;\nOperatingSystemParser.getDesktopOsArray = () => desktopOsArray;\nOperatingSystemParser.getOsFamily = (osName) => {\n    const osShortName = OperatingSystemParser.getOsShortName(osName);\n    for (const [osFamily, shortNames] of Object.entries(osFamilies)) {\n        if (shortNames.includes(osShortName)) {\n            return osFamily;\n        }\n    }\n    return \"\";\n};\nOperatingSystemParser.getOsShortName = (osName) => {\n    for (const [shortName, name] of Object.entries(shortOsNames)) {\n        if (name === osName)\n            return shortName;\n    }\n    return \"\";\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst televisions_json_1 = __importDefault(require(\"../../fixtures/regexes/device/televisions.json\"));\n\nconst variable_replacement_1 = require(\"../../utils/variable-replacement\");\n\nconst user_agent_1 = require(\"../../utils/user-agent\");\n\nconst model_1 = require(\"../../utils/model\");\n\nclass TelevisionParser {\n  constructor() {\n    this.parse = userAgent => {\n      const result = {\n        type: \"\",\n        brand: \"\",\n        model: \"\"\n      };\n      if (!this.isHbbTv(userAgent)) return result;\n      result.type = \"television\";\n\n      for (const [brand, television] of Object.entries(televisions_json_1.default)) {\n        const match = user_agent_1.userAgentParser(television.regex, userAgent);\n        if (!match) continue;\n        result.brand = brand;\n\n        if (\"model\" in television && television.model) {\n          result.model = model_1.buildModel(variable_replacement_1.variableReplacement(television.model, match)).trim();\n        } else if (\"models\" in television && television.models) {\n          for (const model of television.models) {\n            const modelMatch = user_agent_1.userAgentParser(model.regex, userAgent);\n            if (!modelMatch) continue;\n            result.model = model_1.buildModel(variable_replacement_1.variableReplacement(model.model, modelMatch)).trim();\n            break;\n          }\n        }\n\n        break;\n      }\n\n      return result;\n    };\n\n    this.isHbbTv = userAgent => {\n      return user_agent_1.userAgentParser(\"HbbTV\\/([1-9]{1}(?:\\.[0-9]{1}){1,2})\", userAgent);\n    };\n  }\n\n}\n\nexports.default = TelevisionParser;","map":{"version":3,"sources":["/Users/gilad.tamam/dev/Workspace/feedbacks/node_modules/device-detector-js/dist/parsers/device/televisions.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","televisions_json_1","require","variable_replacement_1","user_agent_1","model_1","TelevisionParser","constructor","parse","userAgent","result","type","brand","model","isHbbTv","television","entries","default","match","userAgentParser","regex","buildModel","variableReplacement","trim","models","modelMatch"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,kBAAkB,GAAGP,eAAe,CAACQ,OAAO,CAAC,gDAAD,CAAR,CAA1C;;AACA,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,kCAAD,CAAtC;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,wBAAD,CAA5B;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,mBAAD,CAAvB;;AACA,MAAMI,gBAAN,CAAuB;AACnBC,EAAAA,WAAW,GAAG;AACV,SAAKC,KAAL,GAAcC,SAAD,IAAe;AACxB,YAAMC,MAAM,GAAG;AACXC,QAAAA,IAAI,EAAE,EADK;AAEXC,QAAAA,KAAK,EAAE,EAFI;AAGXC,QAAAA,KAAK,EAAE;AAHI,OAAf;AAKA,UAAI,CAAC,KAAKC,OAAL,CAAaL,SAAb,CAAL,EACI,OAAOC,MAAP;AACJA,MAAAA,MAAM,CAACC,IAAP,GAAc,YAAd;;AACA,WAAK,MAAM,CAACC,KAAD,EAAQG,UAAR,CAAX,IAAkClB,MAAM,CAACmB,OAAP,CAAef,kBAAkB,CAACgB,OAAlC,CAAlC,EAA8E;AAC1E,cAAMC,KAAK,GAAGd,YAAY,CAACe,eAAb,CAA6BJ,UAAU,CAACK,KAAxC,EAA+CX,SAA/C,CAAd;AACA,YAAI,CAACS,KAAL,EACI;AACJR,QAAAA,MAAM,CAACE,KAAP,GAAeA,KAAf;;AACA,YAAI,WAAWG,UAAX,IAAyBA,UAAU,CAACF,KAAxC,EAA+C;AAC3CH,UAAAA,MAAM,CAACG,KAAP,GAAeR,OAAO,CAACgB,UAAR,CAAmBlB,sBAAsB,CAACmB,mBAAvB,CAA2CP,UAAU,CAACF,KAAtD,EAA6DK,KAA7D,CAAnB,EAAwFK,IAAxF,EAAf;AACH,SAFD,MAGK,IAAI,YAAYR,UAAZ,IAA0BA,UAAU,CAACS,MAAzC,EAAiD;AAClD,eAAK,MAAMX,KAAX,IAAoBE,UAAU,CAACS,MAA/B,EAAuC;AACnC,kBAAMC,UAAU,GAAGrB,YAAY,CAACe,eAAb,CAA6BN,KAAK,CAACO,KAAnC,EAA0CX,SAA1C,CAAnB;AACA,gBAAI,CAACgB,UAAL,EACI;AACJf,YAAAA,MAAM,CAACG,KAAP,GAAeR,OAAO,CAACgB,UAAR,CAAmBlB,sBAAsB,CAACmB,mBAAvB,CAA2CT,KAAK,CAACA,KAAjD,EAAwDY,UAAxD,CAAnB,EAAwFF,IAAxF,EAAf;AACA;AACH;AACJ;;AACD;AACH;;AACD,aAAOb,MAAP;AACH,KA7BD;;AA8BA,SAAKI,OAAL,GAAgBL,SAAD,IAAe;AAC1B,aAAOL,YAAY,CAACe,eAAb,CAA6B,sCAA7B,EAAqEV,SAArE,CAAP;AACH,KAFD;AAGH;;AAnCkB;;AAqCvBV,OAAO,CAACkB,OAAR,GAAkBX,gBAAlB","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst televisions_json_1 = __importDefault(require(\"../../fixtures/regexes/device/televisions.json\"));\nconst variable_replacement_1 = require(\"../../utils/variable-replacement\");\nconst user_agent_1 = require(\"../../utils/user-agent\");\nconst model_1 = require(\"../../utils/model\");\nclass TelevisionParser {\n    constructor() {\n        this.parse = (userAgent) => {\n            const result = {\n                type: \"\",\n                brand: \"\",\n                model: \"\"\n            };\n            if (!this.isHbbTv(userAgent))\n                return result;\n            result.type = \"television\";\n            for (const [brand, television] of Object.entries(televisions_json_1.default)) {\n                const match = user_agent_1.userAgentParser(television.regex, userAgent);\n                if (!match)\n                    continue;\n                result.brand = brand;\n                if (\"model\" in television && television.model) {\n                    result.model = model_1.buildModel(variable_replacement_1.variableReplacement(television.model, match)).trim();\n                }\n                else if (\"models\" in television && television.models) {\n                    for (const model of television.models) {\n                        const modelMatch = user_agent_1.userAgentParser(model.regex, userAgent);\n                        if (!modelMatch)\n                            continue;\n                        result.model = model_1.buildModel(variable_replacement_1.variableReplacement(model.model, modelMatch)).trim();\n                        break;\n                    }\n                }\n                break;\n            }\n            return result;\n        };\n        this.isHbbTv = (userAgent) => {\n            return user_agent_1.userAgentParser(\"HbbTV\\/([1-9]{1}(?:\\.[0-9]{1}){1,2})\", userAgent);\n        };\n    }\n}\nexports.default = TelevisionParser;\n"]},"metadata":{},"sourceType":"script"}
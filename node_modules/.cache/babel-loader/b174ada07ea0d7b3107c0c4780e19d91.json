{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { fetchFeedbackApi } from '../api/api';\nexport const useFetchFeedback = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [data, setData] = useState([]);\n  const [isError, setError] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        items: feedbacks,\n        error\n      } = await fetchFeedbackApi();\n\n      if (error) {\n        setError(error);\n      }\n\n      setData(feedbacks);\n      setIsLoading(false);\n    };\n\n    fetchData();\n  }, []);\n  return {\n    isLoading,\n    feedbacks: data,\n    isError\n  };\n};\n\n_s(useFetchFeedback, \"JCE/gkELG/XeoXeEsH4dGO779Ew=\");","map":{"version":3,"sources":["/Users/gilad.tamam/dev/Workspace/feedbacks/src/hooks/use-fetch.ts"],"names":["useEffect","useState","fetchFeedbackApi","useFetchFeedback","isLoading","setIsLoading","data","setData","isError","setError","fetchData","items","feedbacks","error"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,gBAAT,QAA4C,YAA5C;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AAAA;;AAClC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAc,EAAd,CAAhC;AACA,QAAM,CAACO,OAAD,EAAUC,QAAV,IAAsBR,QAAQ,CAAC,KAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,SAAS,GAAG,YAAY;AAC1B,YAAM;AAAEC,QAAAA,KAAK,EAAEC,SAAT;AAAoBC,QAAAA;AAApB,UAA8B,MAAMX,gBAAgB,EAA1D;;AACA,UAAIW,KAAJ,EAAW;AACPJ,QAAAA,QAAQ,CAACI,KAAD,CAAR;AACH;;AACDN,MAAAA,OAAO,CAACK,SAAD,CAAP;AACAP,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAPD;;AASAK,IAAAA,SAAS;AACZ,GAXQ,EAWN,EAXM,CAAT;AAaA,SAAO;AAAEN,IAAAA,SAAF;AAAaQ,IAAAA,SAAS,EAAEN,IAAxB;AAA8BE,IAAAA;AAA9B,GAAP;AACD,CAnBI;;GAAML,gB","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { fetchFeedbackApi, IFeedback } from '../api/api';\n\nexport const useFetchFeedback = () => {\n    const [isLoading, setIsLoading] = useState(true);\n    const [data, setData] = useState<IFeedback[]>([]);\n    const [isError, setError] = useState(false);\n  \n    useEffect(() => {\n        const fetchData = async () => {\n            const { items: feedbacks, error } = await fetchFeedbackApi();\n            if (error) {\n                setError(error);\n            }\n            setData(feedbacks);\n            setIsLoading(false);\n        };\n  \n        fetchData();\n    }, []);\n  \n    return { isLoading, feedbacks: data, isError };\n  };"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst notebooks_json_1 = __importDefault(require(\"../../fixtures/regexes/device/notebooks.json\"));\n\nconst variable_replacement_1 = require(\"../../utils/variable-replacement\");\n\nconst user_agent_1 = require(\"../../utils/user-agent\");\n\nconst model_1 = require(\"../../utils/model\");\n\nclass NotebooksParser {\n  constructor() {\n    this.parse = userAgent => {\n      const result = {\n        type: \"\",\n        brand: \"\",\n        model: \"\"\n      };\n\n      if (!user_agent_1.userAgentParser(\"FBMD/\", userAgent)) {\n        return result;\n      }\n\n      for (const [brand, notebook] of Object.entries(notebooks_json_1.default)) {\n        const match = user_agent_1.userAgentParser(notebook.regex, userAgent);\n        if (!match) continue;\n        result.type = \"desktop\";\n        result.brand = brand;\n\n        if (\"model\" in notebook && notebook.model) {\n          result.model = model_1.buildModel(variable_replacement_1.variableReplacement(notebook.model, match)).trim();\n        } else if (\"models\" in notebook && notebook.models) {\n          for (const model of notebook.models) {\n            const match = user_agent_1.userAgentParser(model.regex, userAgent);\n            if (!match) continue;\n            result.model = variable_replacement_1.variableReplacement(model.model, match).trim();\n          }\n        }\n\n        break;\n      }\n\n      return result;\n    };\n  }\n\n}\n\nexports.default = NotebooksParser;","map":{"version":3,"sources":["/Users/gilad.tamam/dev/Workspace/feedbacks/node_modules/device-detector-js/dist/parsers/device/notebooks.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","notebooks_json_1","require","variable_replacement_1","user_agent_1","model_1","NotebooksParser","constructor","parse","userAgent","result","type","brand","model","userAgentParser","notebook","entries","default","match","regex","buildModel","variableReplacement","trim","models"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,gBAAgB,GAAGP,eAAe,CAACQ,OAAO,CAAC,8CAAD,CAAR,CAAxC;;AACA,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,kCAAD,CAAtC;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,wBAAD,CAA5B;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,mBAAD,CAAvB;;AACA,MAAMI,eAAN,CAAsB;AAClBC,EAAAA,WAAW,GAAG;AACV,SAAKC,KAAL,GAAcC,SAAD,IAAe;AACxB,YAAMC,MAAM,GAAG;AACXC,QAAAA,IAAI,EAAE,EADK;AAEXC,QAAAA,KAAK,EAAE,EAFI;AAGXC,QAAAA,KAAK,EAAE;AAHI,OAAf;;AAKA,UAAI,CAACT,YAAY,CAACU,eAAb,CAA6B,OAA7B,EAAsCL,SAAtC,CAAL,EAAuD;AACnD,eAAOC,MAAP;AACH;;AACD,WAAK,MAAM,CAACE,KAAD,EAAQG,QAAR,CAAX,IAAgClB,MAAM,CAACmB,OAAP,CAAef,gBAAgB,CAACgB,OAAhC,CAAhC,EAA0E;AACtE,cAAMC,KAAK,GAAGd,YAAY,CAACU,eAAb,CAA6BC,QAAQ,CAACI,KAAtC,EAA6CV,SAA7C,CAAd;AACA,YAAI,CAACS,KAAL,EACI;AACJR,QAAAA,MAAM,CAACC,IAAP,GAAc,SAAd;AACAD,QAAAA,MAAM,CAACE,KAAP,GAAeA,KAAf;;AACA,YAAI,WAAWG,QAAX,IAAuBA,QAAQ,CAACF,KAApC,EAA2C;AACvCH,UAAAA,MAAM,CAACG,KAAP,GAAeR,OAAO,CAACe,UAAR,CAAmBjB,sBAAsB,CAACkB,mBAAvB,CAA2CN,QAAQ,CAACF,KAApD,EAA2DK,KAA3D,CAAnB,EAAsFI,IAAtF,EAAf;AACH,SAFD,MAGK,IAAI,YAAYP,QAAZ,IAAwBA,QAAQ,CAACQ,MAArC,EAA6C;AAC9C,eAAK,MAAMV,KAAX,IAAoBE,QAAQ,CAACQ,MAA7B,EAAqC;AACjC,kBAAML,KAAK,GAAGd,YAAY,CAACU,eAAb,CAA6BD,KAAK,CAACM,KAAnC,EAA0CV,SAA1C,CAAd;AACA,gBAAI,CAACS,KAAL,EACI;AACJR,YAAAA,MAAM,CAACG,KAAP,GAAeV,sBAAsB,CAACkB,mBAAvB,CAA2CR,KAAK,CAACA,KAAjD,EAAwDK,KAAxD,EAA+DI,IAA/D,EAAf;AACH;AACJ;;AACD;AACH;;AACD,aAAOZ,MAAP;AACH,KA7BD;AA8BH;;AAhCiB;;AAkCtBX,OAAO,CAACkB,OAAR,GAAkBX,eAAlB","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst notebooks_json_1 = __importDefault(require(\"../../fixtures/regexes/device/notebooks.json\"));\nconst variable_replacement_1 = require(\"../../utils/variable-replacement\");\nconst user_agent_1 = require(\"../../utils/user-agent\");\nconst model_1 = require(\"../../utils/model\");\nclass NotebooksParser {\n    constructor() {\n        this.parse = (userAgent) => {\n            const result = {\n                type: \"\",\n                brand: \"\",\n                model: \"\"\n            };\n            if (!user_agent_1.userAgentParser(\"FBMD/\", userAgent)) {\n                return result;\n            }\n            for (const [brand, notebook] of Object.entries(notebooks_json_1.default)) {\n                const match = user_agent_1.userAgentParser(notebook.regex, userAgent);\n                if (!match)\n                    continue;\n                result.type = \"desktop\";\n                result.brand = brand;\n                if (\"model\" in notebook && notebook.model) {\n                    result.model = model_1.buildModel(variable_replacement_1.variableReplacement(notebook.model, match)).trim();\n                }\n                else if (\"models\" in notebook && notebook.models) {\n                    for (const model of notebook.models) {\n                        const match = user_agent_1.userAgentParser(model.regex, userAgent);\n                        if (!match)\n                            continue;\n                        result.model = variable_replacement_1.variableReplacement(model.model, match).trim();\n                    }\n                }\n                break;\n            }\n            return result;\n        };\n    }\n}\nexports.default = NotebooksParser;\n"]},"metadata":{},"sourceType":"script"}
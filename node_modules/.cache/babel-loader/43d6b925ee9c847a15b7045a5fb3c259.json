{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst car_browsers_json_1 = __importDefault(require(\"../../fixtures/regexes/device/car_browsers.json\"));\n\nconst variable_replacement_1 = require(\"../../utils/variable-replacement\");\n\nconst user_agent_1 = require(\"../../utils/user-agent\");\n\nclass CarParser {\n  constructor() {\n    this.parse = userAgent => {\n      const result = {\n        type: \"\",\n        brand: \"\",\n        model: \"\"\n      };\n\n      for (const [brand, car] of Object.entries(car_browsers_json_1.default)) {\n        const match = user_agent_1.userAgentParser(car.regex, userAgent);\n        if (!match) continue;\n        result.type = \"car\";\n        result.brand = brand;\n\n        for (const model of car.models) {\n          const match = user_agent_1.userAgentParser(model.regex, userAgent);\n          if (!match) continue;\n          result.model = variable_replacement_1.variableReplacement(model.model, match).trim();\n        }\n\n        break;\n      }\n\n      return result;\n    };\n  }\n\n}\n\nexports.default = CarParser;","map":{"version":3,"sources":["/Users/gilad.tamam/dev/Workspace/feedbacks/node_modules/device-detector-js/dist/parsers/device/cars.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","car_browsers_json_1","require","variable_replacement_1","user_agent_1","CarParser","constructor","parse","userAgent","result","type","brand","model","car","entries","default","match","userAgentParser","regex","models","variableReplacement","trim"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,mBAAmB,GAAGP,eAAe,CAACQ,OAAO,CAAC,iDAAD,CAAR,CAA3C;;AACA,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,kCAAD,CAAtC;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,wBAAD,CAA5B;;AACA,MAAMG,SAAN,CAAgB;AACZC,EAAAA,WAAW,GAAG;AACV,SAAKC,KAAL,GAAcC,SAAD,IAAe;AACxB,YAAMC,MAAM,GAAG;AACXC,QAAAA,IAAI,EAAE,EADK;AAEXC,QAAAA,KAAK,EAAE,EAFI;AAGXC,QAAAA,KAAK,EAAE;AAHI,OAAf;;AAKA,WAAK,MAAM,CAACD,KAAD,EAAQE,GAAR,CAAX,IAA2BhB,MAAM,CAACiB,OAAP,CAAeb,mBAAmB,CAACc,OAAnC,CAA3B,EAAwE;AACpE,cAAMC,KAAK,GAAGZ,YAAY,CAACa,eAAb,CAA6BJ,GAAG,CAACK,KAAjC,EAAwCV,SAAxC,CAAd;AACA,YAAI,CAACQ,KAAL,EACI;AACJP,QAAAA,MAAM,CAACC,IAAP,GAAc,KAAd;AACAD,QAAAA,MAAM,CAACE,KAAP,GAAeA,KAAf;;AACA,aAAK,MAAMC,KAAX,IAAoBC,GAAG,CAACM,MAAxB,EAAgC;AAC5B,gBAAMH,KAAK,GAAGZ,YAAY,CAACa,eAAb,CAA6BL,KAAK,CAACM,KAAnC,EAA0CV,SAA1C,CAAd;AACA,cAAI,CAACQ,KAAL,EACI;AACJP,UAAAA,MAAM,CAACG,KAAP,GAAeT,sBAAsB,CAACiB,mBAAvB,CAA2CR,KAAK,CAACA,KAAjD,EAAwDI,KAAxD,EAA+DK,IAA/D,EAAf;AACH;;AACD;AACH;;AACD,aAAOZ,MAAP;AACH,KArBD;AAsBH;;AAxBW;;AA0BhBV,OAAO,CAACgB,OAAR,GAAkBV,SAAlB","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst car_browsers_json_1 = __importDefault(require(\"../../fixtures/regexes/device/car_browsers.json\"));\nconst variable_replacement_1 = require(\"../../utils/variable-replacement\");\nconst user_agent_1 = require(\"../../utils/user-agent\");\nclass CarParser {\n    constructor() {\n        this.parse = (userAgent) => {\n            const result = {\n                type: \"\",\n                brand: \"\",\n                model: \"\"\n            };\n            for (const [brand, car] of Object.entries(car_browsers_json_1.default)) {\n                const match = user_agent_1.userAgentParser(car.regex, userAgent);\n                if (!match)\n                    continue;\n                result.type = \"car\";\n                result.brand = brand;\n                for (const model of car.models) {\n                    const match = user_agent_1.userAgentParser(model.regex, userAgent);\n                    if (!match)\n                        continue;\n                    result.model = variable_replacement_1.variableReplacement(model.model, match).trim();\n                }\n                break;\n            }\n            return result;\n        };\n    }\n}\nexports.default = CarParser;\n"]},"metadata":{},"sourceType":"script"}
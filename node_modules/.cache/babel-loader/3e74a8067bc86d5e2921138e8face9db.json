{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst trim_1 = require(\"./trim\");\n\nexports.formatVersion = (version, versionTruncation) => {\n  if (version === undefined) return \"\";\n  const versionString = trim_1.trim(version, \". \").replace(new RegExp(\"_\", \"g\"), \".\");\n  const versionParts = versionString.split(\".\"); // Return if the string is not only digits once we removed the dots\n\n  if (!/^\\d+$/.test(versionParts.join(\"\"))) {\n    return versionString;\n  }\n\n  if (versionTruncation !== 0) {\n    if (Number.isInteger(parseFloat(versionString))) {\n      return parseInt(versionString, 10).toFixed(1);\n    }\n  }\n\n  if (versionParts.length > 1) {\n    if (versionTruncation !== null) {\n      return versionParts.slice(0, versionTruncation + 1).join(\".\");\n    }\n  }\n\n  return versionString;\n};\n\nexports.parseBrowserEngineVersion = (userAgent, engine) => {\n  if (!engine) return \"\";\n\n  if (engine === \"Gecko\") {\n    const geckoVersionRegex = /[ ](?:rv[: ]([0-9\\.]+)).*gecko\\/[0-9]{8,10}/i;\n    const match = userAgent.match(geckoVersionRegex);\n\n    if (match) {\n      return match.pop();\n    }\n  }\n\n  const regex = new RegExp(`${engine}\\\\s*\\\\/?\\\\s*((?:(?=\\\\d+\\\\.\\\\d)\\\\d+[.\\\\d]*|\\\\d{1,7}(?=(?:\\\\D|$))))`, \"i\");\n  const match = userAgent.match(regex);\n  if (!match) return \"\";\n  return match.pop();\n};","map":{"version":3,"sources":["/Users/gilad.tamam/dev/Workspace/feedbacks/node_modules/device-detector-js/dist/utils/version.js"],"names":["Object","defineProperty","exports","value","trim_1","require","formatVersion","version","versionTruncation","undefined","versionString","trim","replace","RegExp","versionParts","split","test","join","Number","isInteger","parseFloat","parseInt","toFixed","length","slice","parseBrowserEngineVersion","userAgent","engine","geckoVersionRegex","match","pop","regex"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACAH,OAAO,CAACI,aAAR,GAAwB,CAACC,OAAD,EAAUC,iBAAV,KAAgC;AACpD,MAAID,OAAO,KAAKE,SAAhB,EACI,OAAO,EAAP;AACJ,QAAMC,aAAa,GAAGN,MAAM,CAACO,IAAP,CAAYJ,OAAZ,EAAqB,IAArB,EAA2BK,OAA3B,CAAmC,IAAIC,MAAJ,CAAW,GAAX,EAAgB,GAAhB,CAAnC,EAAyD,GAAzD,CAAtB;AACA,QAAMC,YAAY,GAAGJ,aAAa,CAACK,KAAd,CAAoB,GAApB,CAArB,CAJoD,CAKpD;;AACA,MAAI,CAAC,QAAQC,IAAR,CAAaF,YAAY,CAACG,IAAb,CAAkB,EAAlB,CAAb,CAAL,EAA0C;AACtC,WAAOP,aAAP;AACH;;AACD,MAAIF,iBAAiB,KAAK,CAA1B,EAA6B;AACzB,QAAIU,MAAM,CAACC,SAAP,CAAiBC,UAAU,CAACV,aAAD,CAA3B,CAAJ,EAAiD;AAC7C,aAAOW,QAAQ,CAACX,aAAD,EAAgB,EAAhB,CAAR,CAA4BY,OAA5B,CAAoC,CAApC,CAAP;AACH;AACJ;;AACD,MAAIR,YAAY,CAACS,MAAb,GAAsB,CAA1B,EAA6B;AACzB,QAAIf,iBAAiB,KAAK,IAA1B,EAAgC;AAC5B,aAAOM,YAAY,CAACU,KAAb,CAAmB,CAAnB,EAAsBhB,iBAAiB,GAAG,CAA1C,EAA6CS,IAA7C,CAAkD,GAAlD,CAAP;AACH;AACJ;;AACD,SAAOP,aAAP;AACH,CApBD;;AAqBAR,OAAO,CAACuB,yBAAR,GAAoC,CAACC,SAAD,EAAYC,MAAZ,KAAuB;AACvD,MAAI,CAACA,MAAL,EACI,OAAO,EAAP;;AACJ,MAAIA,MAAM,KAAK,OAAf,EAAwB;AACpB,UAAMC,iBAAiB,GAAG,8CAA1B;AACA,UAAMC,KAAK,GAAGH,SAAS,CAACG,KAAV,CAAgBD,iBAAhB,CAAd;;AACA,QAAIC,KAAJ,EAAW;AACP,aAAOA,KAAK,CAACC,GAAN,EAAP;AACH;AACJ;;AACD,QAAMC,KAAK,GAAG,IAAIlB,MAAJ,CAAY,GAAEc,MAAO,mEAArB,EAAyF,GAAzF,CAAd;AACA,QAAME,KAAK,GAAGH,SAAS,CAACG,KAAV,CAAgBE,KAAhB,CAAd;AACA,MAAI,CAACF,KAAL,EACI,OAAO,EAAP;AACJ,SAAOA,KAAK,CAACC,GAAN,EAAP;AACH,CAfD","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst trim_1 = require(\"./trim\");\nexports.formatVersion = (version, versionTruncation) => {\n    if (version === undefined)\n        return \"\";\n    const versionString = trim_1.trim(version, \". \").replace(new RegExp(\"_\", \"g\"), \".\");\n    const versionParts = versionString.split(\".\");\n    // Return if the string is not only digits once we removed the dots\n    if (!/^\\d+$/.test(versionParts.join(\"\"))) {\n        return versionString;\n    }\n    if (versionTruncation !== 0) {\n        if (Number.isInteger(parseFloat(versionString))) {\n            return parseInt(versionString, 10).toFixed(1);\n        }\n    }\n    if (versionParts.length > 1) {\n        if (versionTruncation !== null) {\n            return versionParts.slice(0, versionTruncation + 1).join(\".\");\n        }\n    }\n    return versionString;\n};\nexports.parseBrowserEngineVersion = (userAgent, engine) => {\n    if (!engine)\n        return \"\";\n    if (engine === \"Gecko\") {\n        const geckoVersionRegex = /[ ](?:rv[: ]([0-9\\.]+)).*gecko\\/[0-9]{8,10}/i;\n        const match = userAgent.match(geckoVersionRegex);\n        if (match) {\n            return match.pop();\n        }\n    }\n    const regex = new RegExp(`${engine}\\\\s*\\\\/?\\\\s*((?:(?=\\\\d+\\\\.\\\\d)\\\\d+[.\\\\d]*|\\\\d{1,7}(?=(?:\\\\D|$))))`, \"i\");\n    const match = userAgent.match(regex);\n    if (!match)\n        return \"\";\n    return match.pop();\n};\n"]},"metadata":{},"sourceType":"script"}